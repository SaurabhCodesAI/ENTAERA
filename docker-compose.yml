# Docker Compose for ENTAERA Development Environment
# Following Kata 27.1: Production-ready containerization

version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - LOG_LEVEL=DEBUG
      - PYTHONPATH=/app/src
    volumes:
      # Mount source code for development
      - ./src:/app/src:ro
      - ./config:/app/config:ro
      - ./logs:/app/logs
      - ./data:/app/data
      - ./temp:/app/temp
    env_file:
      - .env.development
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - entaera-dev

  # Optional: Add Redis for caching/session management
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - entaera-dev
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Optional: Add PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=entaera
      - POSTGRES_USER=vertexuser
      - POSTGRES_PASSWORD=vertexpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    restart: unless-stopped
    networks:
      - entaera-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U vertexuser -d entaera"]
      interval: 30s
      timeout: 5s
      retries: 3

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local

networks:
  entaera-dev:
    driver: bridge