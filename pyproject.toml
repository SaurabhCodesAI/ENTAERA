[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "entaera"
version = "0.1.0"
description = "A kata-driven AI research agent with intelligent provider routing"
readme = "README.md"
requires-python = ">=3.11"
license = {file = "LICENSE"}
authors = [
    {name = "ENTAERA Team", email = "team@entaera.com"},
]
keywords = ["ai", "research", "kata", "learning", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Education",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Education",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    # Core dependencies
    "pydantic>=2.5.0",
    "python-dotenv>=1.0.0",
    
    # Web framework
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    
    # CLI framework
    "click>=8.1.0",
    "rich>=13.7.0",
    
    # HTTP client
    "httpx>=0.25.0",
    "aiohttp>=3.9.0",
    
    # AI and ML
    "openai>=1.3.0",
    "google-generativeai>=0.3.0",
    
    # Vector storage
    "faiss-cpu>=1.7.4",
    "numpy>=1.24.0",
    
    # Text processing
    "tiktoken>=0.5.0",
    "emoji>=2.8.0",
    
    # Data processing
    "pandas>=2.1.0",
    
    # Async support
    "asyncio-mqtt>=0.13.0",
    
    # Monitoring and logging
    "structlog>=23.2.0",
    "prometheus-client>=0.19.0",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "hypothesis>=6.88.0",
    
    # Code quality
    "black>=23.11.0",
    "isort>=5.12.0",
    "flake8>=6.1.0",
    "mypy>=1.7.0",
    
    # Performance
    "memory-profiler>=0.61.0",
    "line-profiler>=4.1.0",
    
    # Documentation
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    
    # Development tools
    "pre-commit>=3.6.0",
    "tox>=4.11.0",
]

production = [
    # Production monitoring
    "sentry-sdk>=1.38.0",
    
    # Production server
    "gunicorn>=21.2.0",
    
    # Database
    "sqlalchemy>=2.0.0",
    "alembic>=1.13.0",
    
    # Security
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
]

testing = [
    # Load testing
    "locust>=2.17.0",
    
    # Security testing
    "bandit>=1.7.5",
    "safety>=2.3.0",
    
    # API testing
    "httpx>=0.25.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/ENTAERA-Kata"
Documentation = "https://entaera.readthedocs.io"
Repository = "https://github.com/yourusername/ENTAERA-Kata.git"
Issues = "https://github.com/yourusername/ENTAERA-Kata/issues"

[project.scripts]
entaera = "entaera.cli.main:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
entaera = ["py.typed"]

# Black configuration
[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["entaera"]
known_third_party = ["fastapi", "pydantic", "click"]

# mypy configuration
[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "faiss.*",
    "google.generativeai.*",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "--cov=entaera",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "network: Tests requiring network access",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]